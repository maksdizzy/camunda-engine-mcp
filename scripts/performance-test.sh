#!/bin/bash

# üöÄ Performance Test Script for Camunda MCP Server
# –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CAMUNDA_BASE_URL="${CAMUNDA_BASE_URL:-http://localhost:8080/engine-rest}"
CAMUNDA_USERNAME="${CAMUNDA_USERNAME:-demo}"
CAMUNDA_PASSWORD="${CAMUNDA_PASSWORD:-demo}"
CONCURRENT_USERS="${CONCURRENT_USERS:-5}"
REQUESTS_PER_USER="${REQUESTS_PER_USER:-10}"
WARMUP_REQUESTS="${WARMUP_REQUESTS:-5}"
OUTPUT_DIR="./performance-results"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
mkdir -p "$OUTPUT_DIR"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_FILE="$OUTPUT_DIR/performance-test-$TIMESTAMP.log"
exec > >(tee -a "$LOG_FILE")
exec 2>&1

echo -e "${BLUE}üöÄ Camunda MCP Server - Performance Test Suite${NC}"
echo -e "${BLUE}===============================================${NC}"
echo ""
echo -e "üìÖ Test Run: $(date)"
echo -e "üåê Camunda URL: $CAMUNDA_BASE_URL"
echo -e "üë• Concurrent Users: $CONCURRENT_USERS"
echo -e "üìä Requests per User: $REQUESTS_PER_USER"
echo -e "üî• Warmup Requests: $WARMUP_REQUESTS"
echo -e "üìÅ Output Directory: $OUTPUT_DIR"
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–±–æ—Ä–∫–∏
if [ ! -f "build/index.js" ]; then
    echo -e "${RED}‚ùå Build not found. Running build...${NC}"
    npm run build
    echo -e "${GREEN}‚úÖ Build completed${NC}"
    echo ""
fi

# –ú–∞—Å—Å–∏–≤—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
declare -a RESPONSE_TIMES=()
declare -a ERROR_COUNTS=()
declare -a THROUGHPUT=()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
measure_time() {
    local start_time=$(date +%s%N)
    "$@"
    local end_time=$(date +%s%N)
    local duration=$(( (end_time - start_time) / 1000000 ))
    echo $duration
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
execute_request() {
    local tool_name=$1
    local args=$2
    local request_id=$3
    
    local request=$(cat <<EOF
{
  "jsonrpc": "2.0",
  "id": $request_id,
  "method": "tools/call",
  "params": {
    "name": "$tool_name",
    "arguments": $args
  }
}
EOF
    )
    
    local start_time=$(date +%s%N)
    local output_file="$OUTPUT_DIR/perf_${tool_name}_${request_id}_${TIMESTAMP}.json"
    
    if echo "$request" | timeout 30 node build/index.js > "$output_file" 2>&1; then
        local end_time=$(date +%s%N)
        local duration=$(( (end_time - start_time) / 1000000 ))
        
        if grep -q '"error"' "$output_file"; then
            echo "ERROR:$duration"
        else
            echo "SUCCESS:$duration"
        fi
    else
        echo "TIMEOUT:30000"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è warmup
warmup_test() {
    echo -e "${PURPLE}üî• Running warmup requests...${NC}"
    
    for i in $(seq 1 $WARMUP_REQUESTS); do
        echo -n "."
        execute_request "getProcessDefinitions" '{"maxResults": 1}' "warmup_$i" > /dev/null
        sleep 0.1
    done
    
    echo ""
    echo -e "${GREEN}‚úÖ Warmup completed${NC}"
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
performance_test_tool() {
    local tool_name=$1
    local args=$2
    local test_name=$3
    
    echo -e "${CYAN}üîß Performance testing: $tool_name ($test_name)${NC}"
    
    local total_requests=$(( CONCURRENT_USERS * REQUESTS_PER_USER ))
    local success_count=0
    local error_count=0
    local timeout_count=0
    local total_time=0
    local min_time=999999
    local max_time=0
    
    declare -a response_times=()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º concurrent —Ç–µ—Å—Ç—ã
    local pids=()
    local temp_files=()
    
    local start_test_time=$(date +%s%N)
    
    for user in $(seq 1 $CONCURRENT_USERS); do
        local temp_file="$OUTPUT_DIR/temp_user_${user}_${TIMESTAMP}.txt"
        temp_files+=("$temp_file")
        
        (
            for req in $(seq 1 $REQUESTS_PER_USER); do
                local request_id="${user}_${req}"
                local result=$(execute_request "$tool_name" "$args" "$request_id")
                echo "$result" >> "$temp_file"
            done
        ) &
        
        pids+=($!)
    done
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    for pid in "${pids[@]}"; do
        wait $pid
    done
    
    local end_test_time=$(date +%s%N)
    local total_test_time=$(( (end_test_time - start_test_time) / 1000000 ))
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for temp_file in "${temp_files[@]}"; do
        if [ -f "$temp_file" ]; then
            while IFS=: read -r status time; do
                case $status in
                    "SUCCESS")
                        success_count=$((success_count + 1))
                        response_times+=($time)
                        total_time=$((total_time + time))
                        if [ $time -lt $min_time ]; then min_time=$time; fi
                        if [ $time -gt $max_time ]; then max_time=$time; fi
                        ;;
                    "ERROR")
                        error_count=$((error_count + 1))
                        ;;
                    "TIMEOUT")
                        timeout_count=$((timeout_count + 1))
                        ;;
                esac
            done < "$temp_file"
            rm -f "$temp_file"
        fi
    done
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    local avg_time=0
    local throughput_rps=0
    local success_rate=0
    
    if [ $success_count -gt 0 ]; then
        avg_time=$((total_time / success_count))
        throughput_rps=$(( (success_count * 1000) / (total_test_time / 1000) ))
        success_rate=$(( (success_count * 100) / total_requests ))
    fi
    
    # –í—ã—á–∏—Å–ª—è–µ–º –º–µ–¥–∏–∞–Ω—É –∏ –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª–∏
    local median=0
    local p95=0
    local p99=0
    
    if [ ${#response_times[@]} -gt 0 ]; then
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤
        IFS=$'\n' response_times=($(sort -n <<<"${response_times[*]}"))
        unset IFS
        
        local count=${#response_times[@]}
        median=${response_times[$((count / 2))]}
        p95=${response_times[$((count * 95 / 100))]}
        p99=${response_times[$((count * 99 / 100))]}
    fi
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    echo -e "  üìä Results:"
    echo -e "    ‚úÖ Successful: $success_count/$total_requests (${success_rate}%)"
    echo -e "    ‚ùå Errors: $error_count"
    echo -e "    ‚è∞ Timeouts: $timeout_count"
    echo -e "    üöÄ Throughput: ${throughput_rps} RPS"
    echo -e "    ‚è±Ô∏è  Response Times:"
    echo -e "       Average: ${avg_time}ms"
    echo -e "       Median: ${median}ms"
    echo -e "       Min: ${min_time}ms"
    echo -e "       Max: ${max_time}ms"
    echo -e "       95th percentile: ${p95}ms"
    echo -e "       99th percentile: ${p99}ms"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON
    local results_file="$OUTPUT_DIR/perf_${tool_name}_${test_name}_${TIMESTAMP}.json"
    cat > "$results_file" <<EOF
{
  "tool": "$tool_name",
  "test_name": "$test_name",
  "timestamp": "$(date -Iseconds)",
  "config": {
    "concurrent_users": $CONCURRENT_USERS,
    "requests_per_user": $REQUESTS_PER_USER,
    "total_requests": $total_requests
  },
  "results": {
    "success_count": $success_count,
    "error_count": $error_count,
    "timeout_count": $timeout_count,
    "success_rate": $success_rate,
    "throughput_rps": $throughput_rps,
    "total_test_time_ms": $total_test_time,
    "response_times": {
      "average": $avg_time,
      "median": $median,
      "min": $min_time,
      "max": $max_time,
      "p95": $p95,
      "p99": $p99
    }
  }
}
EOF
    
    # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if [ $success_rate -ge 95 ] && [ $avg_time -le 1000 ]; then
        echo -e "  ${GREEN}‚úÖ EXCELLENT performance${NC}"
    elif [ $success_rate -ge 90 ] && [ $avg_time -le 2000 ]; then
        echo -e "  ${YELLOW}‚ö†Ô∏è  GOOD performance${NC}"
    elif [ $success_rate -ge 80 ] && [ $avg_time -le 5000 ]; then
        echo -e "  ${YELLOW}‚ö†Ô∏è  ACCEPTABLE performance${NC}"
    else
        echo -e "  ${RED}‚ùå POOR performance${NC}"
    fi
    
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞
stress_test() {
    echo -e "${PURPLE}üí™ Running stress test with gradual load increase...${NC}"
    
    local original_concurrent=$CONCURRENT_USERS
    local original_requests=$REQUESTS_PER_USER
    
    for load_level in 1 3 5 10 15; do
        echo -e "${CYAN}üî• Testing with $load_level concurrent users...${NC}"
        
        CONCURRENT_USERS=$load_level
        REQUESTS_PER_USER=5
        
        performance_test_tool "getProcessDefinitions" '{"maxResults": 10}' "stress_${load_level}_users"
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏ –Ω–∞–≥—Ä—É–∑–∫–∏
        sleep 2
    done
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    CONCURRENT_USERS=$original_concurrent
    REQUESTS_PER_USER=$original_requests
    
    echo -e "${GREEN}‚úÖ Stress test completed${NC}"
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
memory_test() {
    echo -e "${PURPLE}üß† Running memory usage test...${NC}"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–º –ø–∞–º—è—Ç—å
    export CAMUNDA_BASE_URL
    export CAMUNDA_USERNAME  
    export CAMUNDA_PASSWORD
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏
    local memory_log="$OUTPUT_DIR/memory_usage_$TIMESTAMP.log"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
    node build/index.js > /dev/null 2>&1 &
    local server_pid=$!
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø–∞–º—è—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
    (
        while kill -0 $server_pid 2>/dev/null; do
            if command -v ps >/dev/null; then
                ps -p $server_pid -o pid,vsz,rss,pmem,pcpu --no-headers >> "$memory_log" 2>/dev/null || break
            fi
            sleep 1
        done
    ) &
    local monitor_pid=$!
    
    # –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    sleep 3
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    echo -e "  üîÑ Executing memory-intensive requests..."
    
    for i in $(seq 1 50); do
        echo '{"jsonrpc": "2.0", "id": '$i', "method": "tools/call", "params": {"name": "getProcessDefinitions", "arguments": {}}}' | \
        timeout 10 node build/index.js > /dev/null 2>&1 &
        
        if [ $((i % 10)) -eq 0 ]; then
            echo -n "."
            wait  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è batch'–∞
        fi
    done
    
    echo ""
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    kill $server_pid 2>/dev/null || true
    kill $monitor_pid 2>/dev/null || true
    wait $server_pid 2>/dev/null || true
    wait $monitor_pid 2>/dev/null || true
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
    if [ -f "$memory_log" ] && [ -s "$memory_log" ]; then
        local max_memory=$(awk '{print $3}' "$memory_log" | sort -n | tail -1)
        local avg_memory=$(awk '{sum+=$3; count++} END {if(count>0) print int(sum/count)}' "$memory_log")
        
        echo -e "  üìä Memory Usage Results:"
        echo -e "    Maximum RSS: ${max_memory}KB ($((max_memory / 1024))MB)"
        echo -e "    Average RSS: ${avg_memory}KB ($((avg_memory / 1024))MB)"
        
        # –û—Ü–µ–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
        local max_memory_mb=$((max_memory / 1024))
        if [ $max_memory_mb -le 100 ]; then
            echo -e "    ${GREEN}‚úÖ EXCELLENT memory usage${NC}"
        elif [ $max_memory_mb -le 250 ]; then
            echo -e "    ${YELLOW}‚ö†Ô∏è  ACCEPTABLE memory usage${NC}"
        else
            echo -e "    ${RED}‚ùå HIGH memory usage${NC}"
        fi
    else
        echo -e "    ${YELLOW}‚ö†Ô∏è  Could not monitor memory usage${NC}"
    fi
    
    echo ""
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
run_performance_tests() {
    echo -e "${PURPLE}üöÄ Starting performance test suite...${NC}"
    echo ""
    
    # Warmup
    warmup_test
    
    # 1. –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    echo -e "${BLUE}üìã Phase 1: Basic Performance Tests${NC}"
    performance_test_tool "getProcessDefinitions" '{}' "basic"
    performance_test_tool "getProcessDefinitions" '{"maxResults": 50}' "with_limit"
    performance_test_tool "getProcessInstances" '{"maxResults": 20}' "basic"
    performance_test_tool "getTasks" '{"maxResults": 20}' "basic"
    performance_test_tool "getDeployments" '{"maxResults": 10}' "basic"
    
    # 2. –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç
    echo -e "${BLUE}üí™ Phase 2: Stress Testing${NC}"
    stress_test
    
    # 3. –¢–µ—Å—Ç –ø–∞–º—è—Ç–∏
    echo -e "${BLUE}üß† Phase 3: Memory Testing${NC}"
    memory_test
    
    # 4. –¢–µ—Å—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ –æ—à–∏–±–∫–∞–º
    echo -e "${BLUE}üö´ Phase 4: Error Resilience Testing${NC}"
    performance_test_tool "startProcessInstance" '{"processDefinitionId": "non-existent"}' "error_handling"
    performance_test_tool "completeTask" '{"taskId": "non-existent"}' "error_handling"
}

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
generate_performance_report() {
    echo ""
    echo -e "${BLUE}üìä Performance Test Summary${NC}"
    echo -e "${BLUE}===========================${NC}"
    echo ""
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    local summary_file="$OUTPUT_DIR/performance-summary-$TIMESTAMP.json"
    local all_results="$OUTPUT_DIR/perf_*_$TIMESTAMP.json"
    
    echo -e "üìÖ Test Completed: $(date)"
    echo -e "‚öôÔ∏è  Configuration:"
    echo -e "   üë• Concurrent Users: $CONCURRENT_USERS"
    echo -e "   üìä Requests per User: $REQUESTS_PER_USER"
    echo -e "   üåê Target: $CAMUNDA_BASE_URL"
    echo ""
    
    # –°–æ–∑–¥–∞–µ–º —Å—É–º–º–∞—Ä–Ω—ã–π –æ—Ç—á–µ—Ç
    cat > "$summary_file" <<EOF
{
  "timestamp": "$(date -Iseconds)",
  "config": {
    "camunda_url": "$CAMUNDA_BASE_URL",
    "concurrent_users": $CONCURRENT_USERS,
    "requests_per_user": $REQUESTS_PER_USER,
    "warmup_requests": $WARMUP_REQUESTS
  },
  "test_files": [
EOF
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ —Ñ–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    local first=true
    for file in $all_results; do
        if [ -f "$file" ]; then
            if [ "$first" = true ]; then
                first=false
            else
                echo "," >> "$summary_file"
            fi
            echo -n "    \"$(basename "$file")\"" >> "$summary_file"
        fi
    done
    
    cat >> "$summary_file" <<EOF

  ],
  "log_file": "$LOG_FILE"
}
EOF
    
    echo -e "üìÑ Detailed logs: $LOG_FILE"
    echo -e "üìÑ Summary report: $summary_file"
    echo -e "üìÅ All results in: $OUTPUT_DIR"
    echo ""
    
    echo -e "${GREEN}üéâ Performance testing completed!${NC}"
    echo -e "${CYAN}üí° Review the individual JSON files for detailed metrics${NC}"
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    echo -e "${PURPLE}üîç Checking dependencies...${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–∞–Ω–¥
    local missing_deps=()
    
    if ! command -v node >/dev/null; then
        missing_deps+=("node")
    fi
    
    if ! command -v timeout >/dev/null; then
        missing_deps+=("timeout")
    fi
    
    if [ ${#missing_deps[@]} -gt 0 ]; then
        echo -e "${RED}‚ùå Missing dependencies: ${missing_deps[*]}${NC}"
        return 1
    fi
    
    echo -e "${GREEN}‚úÖ All dependencies available${NC}"
    return 0
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if ! check_dependencies; then
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    export CAMUNDA_BASE_URL
    export CAMUNDA_USERNAME
    export CAMUNDA_PASSWORD
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Camunda
    echo -e "${PURPLE}üîç Checking Camunda availability...${NC}"
    if ! curl -s -f -u "$CAMUNDA_USERNAME:$CAMUNDA_PASSWORD" "$CAMUNDA_BASE_URL/engine" > /dev/null; then
        echo -e "${RED}‚ùå Camunda is not accessible. Performance tests may fail.${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  Continuing anyway for testing purposes...${NC}"
    else
        echo -e "${GREEN}‚úÖ Camunda is accessible${NC}"
    fi
    echo ""
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    run_performance_tests
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    generate_performance_report
}

# –ó–∞–ø—É—Å–∫
main "$@"
