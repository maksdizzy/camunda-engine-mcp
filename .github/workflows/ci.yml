name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Запуск каждый день в 6:00 UTC для проверки здоровья системы
    - cron: '0 6 * * *'

env:
  NODE_VERSION: '20.x'
  CAMUNDA_BASE_URL: 'http://localhost:8080/engine-rest'
  CAMUNDA_USERNAME: 'demo'
  CAMUNDA_PASSWORD: 'demo'

jobs:
  # 🔍 Проверка кода и линтинг
  lint:
    name: 🔍 Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint

      - name: 💅 Check Prettier formatting
        run: npm run format:check

      - name: 🔧 TypeScript type check
        run: npm run typecheck

  # 🏗️ Сборка проекта
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build project
        run: npm run build

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/
          retention-days: 1

  # 🧪 Юнит тесты
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build/

      - name: 🧪 Run unit tests
        run: npm run test:unit -- --coverage

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unit
          name: unit-tests

  # 🔗 Интеграционные тесты
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build/

      - name: 🔗 Run integration tests
        run: npm run test:integration
        env:
          CAMUNDA_BASE_URL: ${{ env.CAMUNDA_BASE_URL }}
          CAMUNDA_USERNAME: ${{ env.CAMUNDA_USERNAME }}
          CAMUNDA_PASSWORD: ${{ env.CAMUNDA_PASSWORD }}

      - name: 📊 Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: coverage/
          retention-days: 7

  # 🎯 End-to-End тесты
  e2e-tests:
    name: 🎯 E2E Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build/

      - name: 🎯 Run E2E tests
        run: npm run test:e2e
        env:
          CAMUNDA_BASE_URL: ${{ env.CAMUNDA_BASE_URL }}
          CAMUNDA_USERNAME: ${{ env.CAMUNDA_USERNAME }}
          CAMUNDA_PASSWORD: ${{ env.CAMUNDA_PASSWORD }}

      - name: 📊 Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: coverage/
          retention-days: 7

  # 🐳 Docker тесты
  docker-tests:
    name: 🐳 Docker Build & Test
    runs-on: ubuntu-latest
    needs: [unit-tests]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: camunda-engine-mcp:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🧪 Test Docker container
        run: |
          # Запускаем контейнер в фоне
          docker run -d --name camunda-mcp-test \
            -e CAMUNDA_BASE_URL="${{ env.CAMUNDA_BASE_URL }}" \
            -e CAMUNDA_USERNAME="${{ env.CAMUNDA_USERNAME }}" \
            -e CAMUNDA_PASSWORD="${{ env.CAMUNDA_PASSWORD }}" \
            camunda-engine-mcp:test tail -f /dev/null

          # Ждем запуска
          sleep 5

          # Тестируем MCP протокол
          echo '{"jsonrpc": "2.0", "id": 1, "method": "tools/list"}' | \
            docker exec -i camunda-mcp-test node build/index.js

          # Тестируем вызов инструмента
          echo '{"jsonrpc": "2.0", "id": 2, "method": "tools/call", "params": {"name": "getProcessDefinitions", "arguments": {"maxResults": 1}}}' | \
            docker exec -i camunda-mcp-test node build/index.js

          # Очистка
          docker rm -f camunda-mcp-test

  # 🔒 Безопасность и качество кода
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔒 Run npm audit
        run: npm audit --audit-level=moderate

      - name: 🔍 Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # 📊 Отчет о результатах
  test-report:
    name: 📊 Test Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, docker-tests]
    if: always()
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download all test artifacts
        uses: actions/download-artifact@v4

      - name: 📊 Generate test report
        run: |
          echo "## 📊 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.unit-tests.result }}" == "success" ]; then
            echo "✅ **Unit Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Unit Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.integration-tests.result }}" == "success" ]; then
            echo "✅ **Integration Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Integration Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.e2e-tests.result }}" == "success" ]; then
            echo "✅ **E2E Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **E2E Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.docker-tests.result }}" == "success" ]; then
            echo "✅ **Docker Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Docker Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY

  # 🚀 Развертывание (только для main ветки)
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [test-report, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/camunda-engine-mcp:latest
            ${{ secrets.DOCKER_USERNAME }}/camunda-engine-mcp:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 📦 Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            🚀 **Automated Release v${{ github.run_number }}**
            
            **Changes in this release:**
            - Commit: ${{ github.sha }}
            - All tests passed ✅
            - Docker image: `${{ secrets.DOCKER_USERNAME }}/camunda-engine-mcp:${{ github.sha }}`
            
            **Test Results:**
            - ✅ Unit Tests
            - ✅ Integration Tests  
            - ✅ E2E Tests
            - ✅ Docker Tests
            - ✅ Security Scan
          draft: false
          prerelease: false
