/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è end-to-end —Ç–µ—Å—Ç–æ–≤
 */

import axios from 'axios';

// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è E2E —Ç–µ—Å—Ç–æ–≤
jest.setTimeout(120000);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è E2E —Ç–µ—Å—Ç–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º Camunda
beforeAll(async () => {
  const baseUrl = process.env.CAMUNDA_BASE_URL;
  const username = process.env.CAMUNDA_USERNAME;
  const password = process.env.CAMUNDA_PASSWORD;

  if (!baseUrl || !username || !password) {
    throw new Error('E2E —Ç–µ—Å—Ç—ã —Ç—Ä–µ–±—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Camunda: CAMUNDA_BASE_URL, CAMUNDA_USERNAME, CAMUNDA_PASSWORD');
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å Camunda
    const engineResponse = await axios.get(`${baseUrl}/engine`, {
      auth: { username, password },
      timeout: 15000
    });
    
    if (engineResponse.status !== 200) {
      throw new Error(`Camunda engine –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${engineResponse.status}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö API endpoints
    await axios.get(`${baseUrl}/process-definition`, {
      auth: { username, password },
      params: { maxResults: 1 }
    });

    console.log('‚úÖ Camunda –≥–æ—Ç–æ–≤ –¥–ª—è E2E —Ç–µ—Å—Ç–æ–≤');
  } catch (error) {
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Camunda –¥–ª—è E2E —Ç–µ—Å—Ç–æ–≤: ${error instanceof Error ? error.message : error}`);
  }
});

// –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ E2E —Ç–µ—Å—Ç–æ–≤
afterAll(async () => {
  // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã
  await cleanupTestData();
});

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
export const cleanupTestData = async (): Promise<void> => {
  const baseUrl = process.env.CAMUNDA_BASE_URL;
  const username = process.env.CAMUNDA_USERNAME;
  const password = process.env.CAMUNDA_PASSWORD;

  if (!baseUrl || !username || !password) {
    return;
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ deployments —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
    const deploymentsResponse = await axios.get(`${baseUrl}/deployment`, {
      auth: { username, password },
      params: { nameLike: 'test-' }
    });

    const testDeployments = deploymentsResponse.data || [];

    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ deployments
    for (const deployment of testDeployments) {
      try {
        await axios.delete(`${baseUrl}/deployment/${deployment.id}`, {
          auth: { username, password },
          params: { cascade: true }
        });
        console.log(`üßπ –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π deployment: ${deployment.name}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å deployment ${deployment.id}:`, error instanceof Error ? error.message : error);
      }
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error instanceof Error ? error.message : error);
  }
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–æ–≤
export const generateTestName = (prefix: string = 'test'): string => {
  const timestamp = Date.now();
  const random = Math.random().toString(36).substring(7);
  return `${prefix}-${timestamp}-${random}`;
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è E2E —Ç–µ—Å—Ç–æ–≤
global.cleanupTestData = cleanupTestData;
global.generateTestName = generateTestName;

declare global {
  function cleanupTestData(): Promise<void>;
  function generateTestName(prefix?: string): string;
}
